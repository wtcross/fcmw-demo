- hosts: localhost
  gather_facts: no
  tasks:
    - name: find current Windows AMI in this region
      ec2_ami_find:
        aws_region: "{{ target_aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        platform: windows
        virtualization_type: hvm
        owner: amazon
        name: Windows_Server-2016-English-Core-Base-*
        no_result_action: fail
        sort: name
        sort_order: descending
      register: found_amis

    - set_fact:
        win_ami_id: "{{ (found_amis.results | first).ami_id  }}"

    - name: ensure security group is present
      ec2_group:
        aws_region: "{{ target_aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        name: WinRM RDP
        description: Inbound WinRM and RDP
        rules:
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: "{{ ansible_port }}"
          to_port: "{{ ansible_port }}"
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 3389
          to_port: 3389
          cidr_ip: 0.0.0.0/0
        rules_egress:
        - proto: all
          from_port: 0
          to_port: 65535
          cidr_ip: 0.0.0.0/0
      register: sg_out

    - name: ensure instances are running
      ec2:
        aws_region: "{{ target_aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        image: "{{ win_ami_id }}"
        instance_type: t2.micro
        group_id: "{{ sg_out.group_id }}"
        wait: yes
        wait_timeout: 500
        exact_count: 1
        count_tag:
          Name: app-deploy-demo
          Group: webserver
        instance_tags:
          Name: app-deploy-demo
          Group: webserver
        user_data: "{{ lookup('template', 'files/userdata.txt.j2') }}"
      register: ec2_result

    - name: wait for WinRM to answer on all hosts
      wait_for:
        port: "{{ ansible_port }}"
        host: "{{ item.public_ip }}"
        timeout: 300
      with_items: "{{ ec2_result.tagged_instances }}"
